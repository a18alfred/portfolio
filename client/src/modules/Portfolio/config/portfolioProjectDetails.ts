import berezhokIcon from '../assets/projects/icons/Berezhok.webp';
import eterneyIcon from '../assets/projects/icons/Eterney.png';
import nxtLotteryIcon from '../assets/projects/icons/NxtLottery.webp';
import partnerIcon from '../assets/projects/icons/Partner.png';
import porisuemIcon from '../assets/projects/icons/Porisuem.webp';
import portfolioIcon from '../assets/projects/icons/Portfolio.webp';
import prodServiceIcon from '../assets/projects/icons/ProdService.webp';
import streetTrendIcon from '../assets/projects/icons/StreetTrend.webp';
import nxtLotteryMain from '../assets/projects/screenshots/NxtLottery_card.webp';
import nxtLotteryTablet from '../assets/projects/screenshots/NxtLottery_tablet.webp';
import nxtLotteryPhone from '../assets/projects/screenshots/NxtLottery_phone.webp';
import berezhokMain from '../assets/projects/screenshots/Berezhol_card.webp';
import berezhokTablet from '../assets/projects/screenshots/Berezhol_tablet.webp';
import berezhokPhone from '../assets/projects/screenshots/Berezhol_phone.webp';
import eterneyMain from '../assets/projects/screenshots/Eterney_card.webp';
import eterneyTablet from '../assets/projects/screenshots/Eterney_tablet.webp';
import eterneyPhone from '../assets/projects/screenshots/Eterney_phone.webp';
import partnerMain from '../assets/projects/screenshots/Partner_card.webp';
import partnerTablet from '../assets/projects/screenshots/Partner_tablet.webp';
import partnerPhone from '../assets/projects/screenshots/Partner_phone.webp';
import porisuemMain from '../assets/projects/screenshots/Porisuem_card.webp';
import porisuemTablet from '../assets/projects/screenshots/Porisuem_tablet.webp';
import porisuemPhone from '../assets/projects/screenshots/Porisuem_phone.webp';
import portfolioMain from '../assets/projects/screenshots/Portfolio_card.webp';
import portfolioTablet from '../assets/projects/screenshots/Portfolio_tablet.webp';
import portfolioPhone from '../assets/projects/screenshots/Portfolio_phone.webp';
import prodServiceMain from '../assets/projects/screenshots/ProdService_card.webp';
import prodServiceTablet from '../assets/projects/screenshots/ProdService_tablet.webp';
import prodServicePhone from '../assets/projects/screenshots/ProdService_phone.webp';
import streetTrendMain from '../assets/projects/screenshots/StreetTrend_card.webp';
import streetTrendTablet from '../assets/projects/screenshots/StreetTrend_tablet.webp';
import streetTrendPhone from '../assets/projects/screenshots/StreetTrend_phone.webp';

export type ProjectDetails = {
    name: string
    description: string[]
    objectives: string[]
    decisions: string[]
    conclusions: string[]
    icon: string
    mainScreenShot: string
    tabletScreenShot: string
    phoneScreenShot: string
    work: string[]
    githubUrl: string,
    websiteUrl: string,
}

export const projectDetailsById: Record<string, ProjectDetails> = {
    '1': {
        name: 'NxtLottery',
        description: ['NxtLottery представляет собой WEB3-проект, основанный на блокчейне, и предлагает полностью автоматизированную лотерею. Его особенности включают децентрализацию, прозрачность и справедливость, благодаря использованию нового поколения on-chain randomness. В рамках проекта были реализованы три классические лотереи в виде открытых смарт-контрактов, исключающих риск манипуляций третьими лицами.'],
        objectives: ['Главной целью проекта было разработать открытую, справедливую и масштабируемую лотерею, основанную на смарт-контрактах. Лотерея должна была полностью автоматизироваться и использовать проверенный и верифицируемый генератор случайных чисел. Пользовательский интерфейс, в свою очередь, должен был быть современным, эстетичным и удобным для пользователей на всех устройствах, а также поддерживать функцию установки на мобильные устройства через прогрессивное веб-приложение (PWA). Приложение должно было предоставлять возможность выбора светлой и темной тем оформления, а также поддерживать мультиязычность.'],
        decisions: ['Для реализации смарт-контрактов в проекте использовался язык программирования Solidity. Были разработаны и реализованы три отдельных лотерейных контракта, включая общий интерфейс для взаимодействия с ними. Контракты лотерей использовали Chainlink Automation для автоматизации процессов, а также был создан отдельный контракт для генерации случайных чисел с использованием Chainlink VRF. Для создания пользовательских лотерейных билетов был разработан отдельный контракт Tickets, был внедрен Governance контракт для управления всеми контрактами. Все смарт-контракты прошли тщательное тестирование перед внедрением в проект.',
            'Для пользовательского интерфейса проекта был выбран фреймворк React с применением TypeScript и библиотеки Styled components. Был реализован функционал бесконечного скроллинга для лотерейных билетов, обеспечивающий удобный просмотр и выбор билетов без необходимости загрузки всех данных одновременно. Для управления состоянием приложения была использована библиотека Redux Toolkit.'],
        conclusions: ['Результатом работы над проектом стало создание современного, привлекательного лотерейного приложения. Дополнительно была разработана административная панель, обеспечивающая управление лотерейными контрактами, что позволило упростить и ускорить процесс настройки и изменения параметров лотерей, а также обеспечить более гибкое управление всеми аспектами функционирования лотерейного приложения. Смарт-контракты были успешно развернуты в тестовой сети Mumbai от Polygon Network для дальнейшего тестирования и доработки. Выбор Polygon был обусловлен его надежностью, низким уровнем комиссий (gas) и тем, что это масштабируемый слой 2 (L2) сети Ethereum. Работа над проектом позволила получить значительный опыт в работе со смарт-контрактами.'],
        icon: nxtLotteryIcon,
        mainScreenShot: nxtLotteryMain,
        tabletScreenShot: nxtLotteryTablet,
        phoneScreenShot: nxtLotteryPhone,
        work: ['UX и UI дизайн', 'Front-end разработка', 'Back-end разработка'],
        githubUrl: 'https://github.com/a18alfred/nxtlottery',
        websiteUrl: 'https://nxtlottery.com'
    },
    '2': {
        name: 'Eterney',
        description: ['Eterney представляет собой WEB3-проект, основанный на блокчейне, целью которого является сохранение памяти об ушедших близких людях в сети Ethereum. Проект представляет собой децентрализованную стену памяти, которая будет существовать на протяжении всего существования Ethereum Network.'],
        objectives: ['После потери своей бабушки, я поставил перед собой цель сохранить память о ней. Основная задача была создать стену памяти, имитирующую бесконечное звездное небо, с бесчисленными именами, мелькающими на его фоне. При каждом посещении приложения случайным образом выбираются имена из смарт-контракта и отображаются среди звезд. Пользователи имеют возможность нажимать на каждое имя, чтобы получить более подробную информацию о соответствующем человеке. Важно было создать эффективный смарт-контракт, оптимизированный для минимального потребления газа при добавлении новых имен.'],
        decisions: ['Для реализации смарт-контракта Eterney в проекте использовался язык программирования Solidity, который специально предназначен для создания контрактов на платформе Ethereum. Контракт был тщательно протестирован и оптимизирован с целью минимизации расходов на комиссию (gas). Были реализованы функции добавления имен, получения имен с использованием массива идентификаторов, поиска по имени с пагинацией результатов, а также функционал для администрирования.',
            'Пользовательский интерфейс Eterney был разработан с использованием React, Typescript и библиотеки Styled components, для создания современного и удобного интерфейса. Для управления состоянием приложения была использована библиотека Redux Toolkit. С помощью библиотеки i18next приложение поддерживает 32 языка, обеспечивая мультиязычность в интерфейсе. Кроме того, приложение было реализовано в виде прогрессивного веб-приложения (PWA), обеспечивая возможность установки на мобильные устройства.'],
        conclusions: ['Результатом работы над проектом стало создание современного, уникального  веб-приложения. Контракт Eterney был успешно развернут в основной сети Ethereum (Ethereum Mainnet), что позволило мне получить ценный опыт в разработке и оптимизации смарт-контрактов, а также в создании интуитивного пользовательского интерфейса для WEB3-приложений.'],
        icon: eterneyIcon,
        mainScreenShot: eterneyMain,
        tabletScreenShot: eterneyTablet,
        phoneScreenShot: eterneyPhone,
        work: ['UX и UI дизайн', 'Front-end разработка', 'Back-end разработка'],
        githubUrl: 'https://github.com/a18alfred/eterney',
        websiteUrl: 'https://eterney.com'
    },
    '3': {
        name: 'Порисуем',
        description: ['Проект "Порисуем" представляет собой онлайн-платформу для группового рисования. Основной целью проекта является предоставление пользователям возможности рисовать вместе с друзьями и детьми в режиме реального времени. Приложение предлагает создание комнат, где пользователи могут совместно творить и общаться в групповом чате. Одним из ключевых аспектов приложения является его простота использования и ориентация на неформальное рисование, а не на профессиональное творчество.'],
        objectives: ['Я был ответственным за все этапы разработки проекта "Порисуем", включая его концепцию, проектирование, программирование и внедрение. Основной задачей было создание современного и высокопроизводительного приложения для группового рисования в режиме реального времени. Для этого требовалось обеспечить одинаково хорошую работу на компьютерах и мобильных устройствах. Важными задачами были реализация функционала истории, позволяющего пользователям отменять и восстанавливать операции, а также обеспечение возможности мультитач-управления для мобильных устройств, включая зум и перемещение по доске.'],
        decisions: ['Основной фреймворк разработки приложения "Порисуем" - Next.js 13, предоставляющий широкий набор инструментов для создания современных веб-приложений высокой производительности. Для плавных анимаций и обработки перемещений на доске и миникарте использовалась библиотека Framer Motion, а управление состоянием приложения осуществлялось с помощью Recoil - простого и эффективного инструмента с минимальными затратами. Стилизация пользовательского интерфейса осуществлялась с использованием Tailwind CSS, характеризующегося модулярной архитектурой и быстрым созданием стилей.',
            'Для взаимодействия между пользователями в режиме реального времени применялись Express и Socket.IO на стороне сервера. Для развертывания приложения использовался Docker в облачной среде, обеспечивая удобную и надежную инфраструктуру для запуска, масштабирования и развертывания на различных средах, снижая вероятность проблем совместимости и зависимостей.'],
        conclusions: ['Результаты работы над проектом "Порисуем" были полностью удовлетворительными. Были успешно реализованы все поставленные задачи, а также внедрены дополнительные функциональные возможности, улучшающие удобство использования для конечных пользователей. Приложение было реализовано в виде прогрессивного веб-приложения (PWA), обеспечивая возможность установки на мобильные устройства.',
            'Этот проект стал для меня ценным опытом, позволившим расширить мои навыки в создании онлайн-приложений. В ходе работы над проектом я улучшил свои знания и навыки в области синхронизации данных в режиме реального времени, эффективного управления событиями и обмена данными между клиентской и серверной частями приложения. Эти умения окажутся незаменимыми для моих будущих проектов.'],
        icon: porisuemIcon,
        mainScreenShot: porisuemMain,
        tabletScreenShot: porisuemTablet,
        phoneScreenShot: porisuemPhone,
        work: ['UX и UI дизайн', 'Front-end разработка', 'Back-end разработка'],
        githubUrl: 'https://github.com/a18alfred/wedraw',
        websiteUrl: 'https://порисуем.рф'
    },
    '4': {
        name: 'Street Trend',
        description: ['Проект "Street Trend" представляет собой полноценную платформу для электронной коммерции, которая обладает всем необходимым функционалом для управления продажами, товарами и заказами в удобном и эффективном режиме. В качестве тестового примера был выбран интернет-магазин обуви.'],
        objectives: ['Целью проекта "Street Trend" было разработать веб-приложение, которое соответствует передовым технологиям и обеспечивает пользовательский интерфейс, сопоставимый с нативными приложениями на мобильных устройствах. Главными задачами было создание полноценного интернет-магазина для продажи обуви, создание красивого и удобного интерфейса, поддержка светлой и темной темы. Пользовательский функционал должен был включать функции поиска, покупки товаров, отслеживания статуса заказа и возможности оставлять отзывы. Важным элементом было создание административной панели, которая обеспечивает удобное управление товарами, заказами, модерацию отзывов и предоставляет доступ к статистике продаж, с целью обеспечить эффективное управление интернет-магазином.'],
        decisions: ['В качестве основного фреймворка был использован Next.js, который позволяет объединить пользовательский интерфейс и серверную часть в одном месте, обеспечивая эффективность разработки. Для управления состоянием приложения была выбрана библиотека Redux. MongoDB была выбрана в качестве базы данных для проекта из-за ее гибкости и масштабируемости, а для взаимодействия с ней использовалась библиотека Mongoose. Кроме того, в проекте был активно использован Typescript для более надежного и понятного кода. Для стилизации интерфейса применялась библиотека Styled components, позволяющая интегрировать стили прямо в код и создавать переиспользуемые компоненты. Также была реализована интеграция с платформой Cloudinary для эффективной обработки и хранения изображений. Приложение было тщательно протестировано с использованием Jest, Enzyme и других тестовых фреймворков для обеспечения надежного и стабильного функционирования.'],
        conclusions: ['Результаты работы над проектом "Street Trend" были полностью удовлетворительными. Были успешно реализованы все поставленные задачи, которые обеспечили создание современного и привлекательного веб-приложения. Проект предоставил ценный опыт работы с электронной коммерцией и подтвердил эффективность выбранных технологий и инструментов. "Street Trend" является хорошей отправной точкой для будущих проектов в данной области.'],
        icon: streetTrendIcon,
        mainScreenShot: streetTrendMain,
        tabletScreenShot: streetTrendTablet,
        phoneScreenShot: streetTrendPhone,
        work: ['UX и UI дизайн', 'Front-end разработка', 'Back-end разработка'],
        githubUrl: 'https://github.com/a18alfred/street-trend',
        websiteUrl: 'https://street-trend.vercel.app'
    },
    '5': {
        name: 'Партнёр',
        description: ['Привлекательный, информативный веб-сайт охранного предприятия, который представляет их компетенции и услуги, а также обеспечивает удобный способ связи для клиентов. "Партнёр" является деятелем на рынке охранных услуг с 2014 года и обладает всем необходимым комплексом лицензий для осуществления охранной деятельности, а также монтажа и обслуживания систем пожарной безопасности. '],
        objectives: ['Задача проекта состояла в разработке информативного лендинга для охранного предприятия "Партнёр". В рамках проекта было необходимо создать современный и привлекательный дизайн веб-сайта, который отображал бы компетенции и опыт "Партнёра" в области охранных услуг. Главным элементом функциональности лендинга была форма обратной связи, предлагающая посетителям ввести свое имя и телефонный номер для последующего контакта. Это позволяло клиентам установить прямую связь с "Партнёром" и обсудить свои индивидуальные требования и потребности в области безопасности.'],
        decisions: ['В рамках проекта был выбран основной фреймворк Next.js, который обеспечил лучшую индексацию и быструю загрузку страниц за счет использования серверного рендеринга. Next.js предоставил возможность создания мощного и масштабируемого веб-приложения с привлекательным пользовательским интерфейсом.',
            'Для реализации формы обратной связи было разработано API, используя возможности Next.js. API обрабатывал данные, полученные от пользователей, и передавал их на сервер для дальнейшей обработки. Для отправки уведомлений о новых обращениях на предприятие "Партнёр" была использована библиотека Nodemailer, которая позволяет отправлять электронные письма из приложения. Такое решение с использованием Next.js и Nodemailer обеспечило безопасность и надежность обработки данных пользователей, а также оперативное уведомление "Партнёра" о новых обращениях.'],
        conclusions: ['В результате успешной реализации проекта, "Партнёр" получил современный и эффективный инструмент для представления своих услуг и привлечения клиентов. Лендинг стал важной частью маркетинговой стратегии компании, обеспечивая ей улучшенную видимость в сети и возможность установления прямой коммуникации с потенциальными клиентами.'],
        icon: partnerIcon,
        mainScreenShot: partnerMain,
        tabletScreenShot: partnerTablet,
        phoneScreenShot: partnerPhone,
        work: ['UX дизайн', 'Front-end разработка', 'Back-end разработка'],
        githubUrl: 'https://github.com/a18alfred/partner',
        websiteUrl: 'https://www.partner-ohrana.ru'
    },
    '6': {
        name: 'Бережок',
        description: ['Проект "Бережок" - это современное веб-приложение для размещения объявлений о сдаче в аренду различных типов жилья и баз отдыха. Оно разработано с использованием Next.js 13, включая экспериментальный app-каталог, и основано на принципах асинхронных серверных компонентов для эффективного получения и отображения данных в пользовательском интерфейсе.'],
        objectives: ['Основные задачи проекта заключались в создании удобного веб-приложения с адаптивным дизайном, работающего безупречно на всех устройствах, и в исследовании возможностей Next.js 13, включая асинхронные серверные компоненты. Требовалось объединить серверные и клиентские компоненты для создания эффективного гибридного решения.',
            'Функциональность приложения была нацелена на удобство как для арендодателей, так и для обычных пользователей. Арендодатели могли быстро и легко размещать объявления и управлять ими, а пользователи могли комфортно просматривать объявления, использовать фильтры для поиска и бронировать жилье на доступные даты.'],
        decisions: ['Для реализации проекта был выбран Next.js в качестве основного инструмента для разработки серверной части и пользовательского интерфейса. Взаимодействие с базой данных MongoDB осуществлялось при помощи библиотеки Prisma. Стилизация приложения была выполнена с использованием SASS с модулями, что позволило создавать модульные стили для каждого компонента. Для управления клиентским состоянием был использован Redux Toolkit.',
            'Активное использование асинхронных серверных компонентов позволило эффективно получать и отображать данные в пользовательском интерфейсе. Для реализации бесконечного скролла использовался классический Rest API запрос со стороны клиента, обеспечивая плавную подгрузку данных без обновления всей страницы.',
            'Особое внимание уделялось реализации удобного поиска объявлений на карте. С использованием Yandex карты создана интерактивная карта России, позволяющая выбирать регион и просматривать соответствующие объявления.'],
        conclusions: ['В ходе проекта "Бережок" я получил ценные знания о работе с асинхронными серверными компонентами для эффективного получения данных. Это позволило мне определить лучшие практики использования данных подходов и применять их в подходящих ситуациях, а также избегать неподходящих сценариев применения.',
            'С использованием Next.js 13 я создал масштабируемое, быстрое и отзывчивое веб-приложение. Применение асинхронных серверных компонентов положительно сказалось на производительности и пользовательском опыте. Результатом стал удобный интерфейс, минимальное время ожидания и плавное взаимодействие с приложением, даже при обработке больших объемов данных.'],
        icon: berezhokIcon,
        mainScreenShot: berezhokMain,
        tabletScreenShot: berezhokTablet,
        phoneScreenShot: berezhokPhone,
        work: ['UX и UI дизайн', 'Front-end разработка', 'Back-end разработка'],
        githubUrl: 'https://github.com/a18alfred/berezhok',
        websiteUrl: 'https://berezhok.vercel.app'
    },
    '7': {
        name: 'Alfred18.ru',
        description: ['Гибридное веб-приложение, объединяющее имитацию работы Windows 98, личную страницу и портфолио. Первая часть приложения предоставляет возможность взаимодействия с различными приложениями и окнами, в то время как вторая часть представляет собой современное портфолио. Важно отметить, что имитация Windows 98 не доступна на мобильных устройствах.'],
        objectives: ['Основной целью данного проекта было создание уникального и многофункционального веб-пространства, объединяющего интерактивность Windows 98, личную веб-страницу и эффективное представление моего портфолио в качестве Fullstack-разработчика, а также обеспечение возможности прямой связи с пользователями через форму обратной связи.'],
        decisions: ['В процессе разработки проекта был использован современный стек технологий, включающий React с применением TypeScript в качестве основного фреймворка. Для создания стильного и динамичного интерфейса была внедрена библиотека Styled components. Для управления состоянием приложения Windows 98 (AlfredOS) был выбран Redux Toolkit, обеспечивающий эффективную организацию данных и управление состоянием приложения.',
            'Для реализации функциональности формы обратной связи был разработан серверный API, используя Node.js и Express, для отправки сообщений с сервера была внедрена библиотека Nodemailer, обеспечивающая надежную доставку электронных писем из приложения.',
            'Приложение было реализовано в виде прогрессивного веб-приложения (PWA), обеспечивая возможность установки на мобильные устройства.'],
        conclusions: ['В результате проекта была достигнута основная цель - создание уникального личного веб-пространства, которое предоставляет информацию обо мне, моих работах и резюме. Пользователям предоставляется возможность ознакомиться с моими навыками и проектами, а также установить прямую связь со мной через форму обратной связи. Имитация работы Windows 98 добавила интересный и ностальгический аспект взаимодействия с приложением. Применение современных технологий, таких как React, TypeScript и Redux Toolkit, обеспечило гибкость, эффективность и надежность при разработке приложения.'],
        icon: portfolioIcon,
        mainScreenShot: portfolioMain,
        tabletScreenShot: portfolioTablet,
        phoneScreenShot: portfolioPhone,
        work: ['UX и UI дизайн', 'Front-end разработка', 'Back-end разработка'],
        githubUrl: 'https://github.com/a18alfred/portfolio',
        websiteUrl: 'https://www.alfred18.ru'
    },
    '8': {
        name: 'ProdShop',
        description: ['Проект ProdShop представляет собой полноценный веб-сайт электронной коммерции, разработанный для компании Продсервис в качестве дополнительного интернет-магазина для одного из её региональных филиалов. На данный момент проект завершён и закрыт.'],
        objectives: ['Основной целью проекта было создание удобного и современного интернет-магазина с функционалом администрирования. В рамках задачи требовалось реализовать отображение лучших акций, новинок и возможность поиска товаров по названию и по категориям. Важным фактором было создание эстетически привлекательного вида сайта, адаптированного для работы на различных устройствах.'],
        decisions: ['Серверная часть проекта была реализована с использованием Node.js и фреймворка Express, а для взаимодействия с базой данных MySQL была использована библиотека Sequelize. Было разработано REST API с использованием JWT-токенов (Access и Refresh) и функционалом восстановления пароля. Полностью реализованы функции интернет-магазина и администрирования. Для уведомления пользователей через электронную почту использовалась библиотека Nodemailer.',
            'Пользовательский интерфейс был реализован с использованием React и TypeScript. Для стилизации была использована библиотека Tailwind CSS, а для управления состоянием приложения - Redux Toolkit. Для работы с запросами и кеширования данных была использована библиотека React Query.'],
        conclusions: ['Проект ProdShop успешно реализовал все поставленные задачи, предоставив компании Продсервис дополнительный канал продаж и улучшив взаимодействие с клиентами. Благодаря использованию современных технологий, таких как React,  удалось создать удобный и эстетически привлекательный интерфейс, а библиотека React Query значительно упростила работу с запросами и кэшированием данных. Работа над проектом также позволила расширить понимание разработки e-commerce веб-приложений и повысить навыки в области разработки и оптимизации серверной части с использованием Node.js и Express.'],
        icon: prodServiceIcon,
        mainScreenShot: prodServiceMain,
        tabletScreenShot: prodServiceTablet,
        phoneScreenShot: prodServicePhone,
        work: ['Front-end разработка', 'Back-end разработка'],
        githubUrl: 'https://github.com/a18alfred/eshop',
        websiteUrl: 'https://prodshop.vercel.app'
    }
};