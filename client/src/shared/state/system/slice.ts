import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, ThunkApi } from '../index';
import { EmailStatus, ContactFormData, SystemState } from './types';
import { sendEmailWithApi } from '../../rest-client/rest/contact';

/**
 Represents the initial state for the system slice.
 @typedef {Object} initialState
 @property {boolean} toShowIntro - Indicates whether the system's intro should be shown.
 @property {boolean} isShutdown - Indicates whether the system is currently shut down.
 @property {number} shutdownCount - The number of times the system has been shut down.
 @property {number} volume - The volume level of the system.
 */
const initialState: SystemState = {
    toShowIntro: true,
    isIFrame: false,
    isShutdown: false,
    shutdownCount: 0,
    volume: 0.5,
    emailStatus: EmailStatus.PREPARING
};

interface SendEmailPayload {
    formData: ContactFormData;
}

interface SendEmailResult {
}

/**
 Sends an email using the sendEmailWithApi function with the provided contact form data.
 @async
 @function sendEmail
 @param {Object} payload - Payload object for sending an email.
 @param {Object} payload.formData - Contact form data to send.
 @returns {Promise<Object>} Promise object representing the result of the email sending operation.
 @throws {Error} Error object representing any errors that occurred during the email sending operation.
 */
export const sendEmail = createAsyncThunk<SendEmailResult, SendEmailPayload, ThunkApi>(
    'system/sendEmail',
    async (props) => {
        const { formData } = props;
        await sendEmailWithApi(formData);
    }
);

/**
 The system slice of the redux store.
 */
export const systemSlice = createSlice({
    name: 'system',
    initialState,
    reducers: {
        change_volume: (state, action: PayloadAction<{ volume: number }>) => {
            const volume = action.payload.volume;
            state.volume = volume <= 1
                ? volume >= 0 ? volume : 0
                : 1;
        },
        start_shutdown: (state) => {
            state.isShutdown = true;
        },
        os_loaded: (state) => {
            state.isShutdown = false;
            state.shutdownCount = state.shutdownCount < 8 ? state.shutdownCount + 1 : 0;
        },
        intro_loaded: (state, action: PayloadAction<{ isIFrame: boolean }>) => {
            state.toShowIntro = false;
            state.isIFrame = action.payload.isIFrame;
        }
    },
    extraReducers: (builder) => {
        builder
            .addCase(sendEmail.pending, (state) => {
                state.emailStatus = EmailStatus.SENDING;
            })
            .addCase(sendEmail.fulfilled, (state) => {
                state.emailStatus = EmailStatus.SENT;
            })
            .addCase(sendEmail.rejected, (state, action) => {
                state.emailStatus = EmailStatus.SEND_ERROR;
                console.error(action.error);
            });
    }
});

/**
 The Redux action creators generated by the windowSlice reducer.
 @typedef {Object} SystemActions
 @property {function} change_volume - A reducer that changes the volume level of the system.
 @property {function} start_shutdown - A reducer that indicates that the system is being shut down.
 @property {function} os_loaded - A reducer that indicates that the operating system has loaded.
 @property {function} intro_loaded - A reducer that indicates that the intro has loaded.
 */
export const {
    change_volume,
    start_shutdown,
    os_loaded,
    intro_loaded
} = systemSlice.actions;

export const selectSystemToShowIntro = (state: RootState) => state.system.toShowIntro;
export const selectSystemIsIframe = (state: RootState) => state.system.isIFrame;
export const selectSystemIsShutdown = (state: RootState) => state.system.isShutdown;
export const selectSystemShutdownCount = (state: RootState) => state.system.shutdownCount;
export const selectSystemVolume = (state: RootState) => state.system.volume;
export const selectSystemEmailStatus = (state: RootState) => state.system.emailStatus;

export default systemSlice.reducer;
