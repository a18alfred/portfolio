import { createSelector, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { OpenWindowProps, WindowInteractProps, WindowState } from './types';
import { RootState } from '../index';

/**

 The initial state for the window slice, which includes an empty map of desktopWindows,
 a highestZIndex value of 0, and no active window app key.
 @typedef {Object} WindowState
 @property {Object} desktopWindows - A map of the desktop windows in the application.
 @property {number} highestZIndex - The highest z-index value of the windows.
 @property {string} activeWindowAppKey - The key of the active window in the application.
 */
const initialState: WindowState = {
    desktopWindows: {},
    highestZIndex: 0,
    activeWindowAppKey: null
};

/**
 Redux slice for the window state.
 */
export const windowSlice = createSlice({
    name: 'window',
    initialState,
    reducers: {
        close_all: () => initialState,
        open_window: (state, action: PayloadAction<OpenWindowProps>) => {
            if (!state.desktopWindows[action.payload.key]) {
                state.desktopWindows[action.payload.key] = {
                    key: action.payload.key,
                    zIndex: state.highestZIndex + 1,
                    minimized: false,
                    name: action.payload.name,
                    icon: action.payload.icon
                };
                state.activeWindowAppKey = action.payload.key;
                state.highestZIndex++;
            } else {
                state.activeWindowAppKey = action.payload.key;
                state.desktopWindows[action.payload.key].minimized = false;
                if (state.desktopWindows[action.payload.key].zIndex < state.highestZIndex) {
                    state.desktopWindows[action.payload.key].zIndex = state.highestZIndex + 1;
                    state.highestZIndex++;
                }
            }
        },
        toggle_minimize: (state, action: PayloadAction<WindowInteractProps>) => {
            if (state.desktopWindows[action.payload.key].minimized ||
                state.desktopWindows[action.payload.key].zIndex === state.highestZIndex
            ) {
                if (state.desktopWindows[action.payload.key].minimized) state.activeWindowAppKey = action.payload.key;
                state.desktopWindows[action.payload.key].minimized = !state.desktopWindows[action.payload.key].minimized;
            }
            if (state.desktopWindows[action.payload.key].zIndex < state.highestZIndex) {
                state.desktopWindows[action.payload.key].zIndex = state.highestZIndex + 1;
                state.highestZIndex++;
                state.activeWindowAppKey = action.payload.key;
            }
        },
        window_minimize: (state, action: PayloadAction<WindowInteractProps>) => {
            state.desktopWindows[action.payload.key].minimized = true;
            state.activeWindowAppKey = null;
        },
        window_interact: (state, action: PayloadAction<WindowInteractProps>) => {
            if (state.desktopWindows[action.payload.key] && !state.desktopWindows[action.payload.key].minimized) {
                if (state.desktopWindows[action.payload.key].zIndex < state.highestZIndex) {
                    state.desktopWindows[action.payload.key].zIndex = state.highestZIndex + 1;
                    state.highestZIndex++;
                }
                if (!state.desktopWindows[action.payload.key].minimized)
                    state.activeWindowAppKey = action.payload.key;
            }
        },
        window_deactivate: (state, action: PayloadAction<WindowInteractProps>) => {
            if (state.activeWindowAppKey === action.payload.key) {
                state.activeWindowAppKey = null;
            }
        },
        remove_window: (state, action: PayloadAction<WindowInteractProps>) => {
            if (state.desktopWindows[action.payload.key]) {
                if (Object.keys(state.desktopWindows).length === 1) {
                    state.highestZIndex = 0;
                }
                state.activeWindowAppKey = null;
                delete state.desktopWindows[action.payload.key];
            }
        }
    }
});

/**
 The Redux action creators generated by the windowSlice reducer.
 @typedef {Object} WindowActions
 @property {function} open_window - Opens a window with the provided key, name, and icon.
 @property {function} toggle_minimize - Toggles the minimize state of a window with the provided key.
 @property {function} window_minimize - Minimizes a window with the provided key.
 @property {function} window_interact - Brings a window with the provided key to the front.
 @property {function} window_deactivate - Deactivates a window with the provided key.
 @property {function} remove_window - Removes a window with the provided key.
 @property {function} close_all - Closes all windows and resets the window state to the initial state.
 */
export const {
    open_window,
    toggle_minimize,
    window_minimize,
    window_interact,
    remove_window,
    window_deactivate,
    close_all
} = windowSlice.actions;

export default windowSlice.reducer;

export const selectDesktopWindows = (state: RootState) => state.window.desktopWindows;
export const selectHighestZIndex = (state: RootState) => state.window.highestZIndex;
export const selectActiveWindow = (state: RootState) => state.window.activeWindowAppKey;

export const selectWindowByKey = createSelector(
    [
        (state: RootState) => state.window,
        (state: RootState, key: string) => key
    ],
    (window, key) => window.desktopWindows[key]
);

export const selectZIndexWindowByKey = createSelector(
    [
        (state: RootState) => state.window,
        (state: RootState, key: string) => key
    ],
    (window, key) => window.desktopWindows[key].zIndex
);